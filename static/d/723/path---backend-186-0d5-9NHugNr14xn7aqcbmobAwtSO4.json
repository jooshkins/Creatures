{"data":{"site":{"siteMetadata":{"title":"Creatures üëπüõ¥","author":"Joshua Sheridan"}},"markdownRemark":{"id":"bd2e64a3-2e47-522d-b60c-8dccff587b06","excerpt":"This post covers the process of designing the Back End (server side code) for my scooter share app, Creatures. My back end will manage a‚Ä¶","html":"<p>This post covers the process of designing the Back End (server side code) for my scooter share app, Creatures. My back end will manage a database, authorize users, execute application logic, and communicate with our hardware (scooters).  I started developing the back end first because it is the core of my application and the other parts, (front end, hardware, etc) all rely on the back end.</p>\n<p>This post is not meant to explain in exhaustive detail the problems involved and how to resolve them.  For a guide that does cover setting up a serverless application in exhaustive detail I recommend the <a href=\"https://serverless-stack.com\">Severless Stack Guide</a>, it‚Äôs great. </p>\n<p>I chose to structure my back end as a serverless application, which means I will not need to provision and maintain any servers. To build my serverless app, I will use <a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a></p>\n<p><strong>Specifically I will be using these AWS services:</strong></p>\n<ul>\n<li><a href=\"https://aws.amazon.com/cognito/\">Cognito</a> - authorization / authentication</li>\n<li><a href=\"https://aws.amazon.com/lambda/\">Lamda</a> - application logic</li>\n<li><a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a> - simple database for keeping track of scooters</li>\n<li><a href=\"https://aws.amazon.com/api-gateway/\">API Gateway</a> - API to receive communication from clients and scooters</li>\n</ul>\n<p>Additionally my back end will communicate with a Cloud IoT service, <a href=\"https://www.particle.io/\">Particle</a>. My scooters will use Particle hardware. I cover Particle in greater depth in the <a href=\"/hardware\">üîß Hardware Guide</a>. </p>\n<h1>üò° Challenges</h1>\n<p>When designing the back end for my scooter share, it was helpful for me to start by writing out the features I wanted to provide for my users. Writing out a features list, should help concentrate my development efforts. The feature list I came up with was focused on <strong>must-have</strong> features. Since I considered this project a proof of concept I wanted to focus my efforts on creating a minimum viable product.</p>\n<p><strong>Here is the list of must-have features</strong> </p>\n<ul>\n<li>Scooter needs to be GPS tracked both from scooter side and client side for redundancy</li>\n<li>User needs to be able to create an account and log into it and out of it</li>\n<li>User needs to be able check out and check in scooters</li>\n<li>Rides are based on a set time limit e.g. 20 minutes</li>\n</ul>\n<p><strong>Here is a list of secondary features that I would like to have some day:</strong></p>\n<ul>\n<li>User can find scooter on map</li>\n<li>Native apps (IOS, Android)</li>\n<li>User can see battery status of scooter</li>\n<li>User can track ride history</li>\n<li>User can edit account settings after creating an account: name, email, etc.</li>\n<li>User can have the scooter sound a chime to help find it</li>\n</ul>\n<h1>ü§î Solutions</h1>\n<h2>üîë Authentication and Authorization</h2>\n<p>For Authorization, I used Amazon Cognito. The nice part about Cognito is that handles all the password requirement logic, and verification steps.\nThere are two parts to using Cognito:</p>\n<ul>\n<li>\n<p>User Pools - used for authentication</p>\n<ul>\n<li>provides signup and login functionality for my app</li>\n</ul>\n</li>\n<li>\n<p>Identity Pools - used for authorization</p>\n<ul>\n<li>provides access to other AWS services that I designate, in my case that will mean authorizing access to my API Gateway resources.</li>\n</ul>\n</li>\n</ul>\n<h2>üíΩ Database</h2>\n<p>I will use <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a> as my database solution.\nFor simplicity‚Äôs sake, ****I will use a single table and each scooter will have a single entry that gets updated when a user checks in or checks out a scooter. The database will be managed by Lamda functions I setup. </p>\n<p><strong>Each entry into the table is structured as follows: (one object per scooter)</strong></p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">checkInTime</code></td>\n<td>Number - UTC time for when the scooter was last checked in</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">checkOutTime</code></td>\n<td>Number -UTC time for when the scooter was last checked out</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gps</code></td>\n<td>List - containing multiple Map objects with GPS coordinates</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gpsArchive</code></td>\n<td>List - prior list containing multiple Map objects with GPS coordinates</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">requestID</code></td>\n<td>String - UID tied to last check out request</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">scooterId</code></td>\n<td>String - code tied to particular scooter</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">userId</code></td>\n<td>String - provided by cognito identifying particular user</td>\n</tr>\n</tbody>\n</table>\n<h2>üìú Logic</h2>\n<p>For my application‚Äôs logic, I will be using Lamda functions. Lamda is the service that makes my application a serverless application. Essentially every time my application needs to run some code, Lamda spins up a <a href=\"https://www.docker.com/resources/what-container\">container</a>, runs the code, and shuts down the container after the code completes. The beauty of using Lamda, is that I can focus on the code for my app without worrying about the infrastructure; no, setting up servers, containers, or installing applications, just code. </p>\n<p><strong>The following table lists all of my Lamda functions. ‚Äî All functions are written in JavaScript.</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>Function Name</strong></th>\n<th><strong>Function‚Äôs‚Ä¶ function</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">archiveGPS</code></td>\n<td>Moves GPS coordinates from the current log into archive, gets called every 5 mins during a ride.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">logGPS</code></td>\n<td>Logs a set of GPS coordinates into current log gets called every minute during a ride.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">checkIn</code></td>\n<td>Calls Particle function to lock scooter then updates checkInTime for scooter</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">checkOut</code></td>\n<td>Calls Particle function to unlock scooter then updates database with current rider‚Äôs info</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">checkStatus</code></td>\n<td>Checks to see if the scooter is available for check out</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">scooterCheckSelf</code></td>\n<td>Checks to see if the scooter is currently checked out.</td>\n</tr>\n</tbody>\n</table>\n<p>Outside of my Lamda functions, there are several functions that reside on the scooter‚Äôs IoT hardware, a <a href=\"https://www.particle.io/cellular/\">Particle Electron</a>. Particle‚Äôs cloud service provides access to functions stored on the device via a simple API.</p>\n<h2>üí¨ API</h2>\n<p>I setup API endpoints for each of the functions listed above using API Gateway. Authenticated users will have access to all endpoints except for the scooterCheckSelf, that endpoint only the scooters will have access to. In order to provision access to the scooterCheckSelf API, I setup up an API Key that the scooter will use to authenticate.</p>\n<h1>üôÇ Implementation</h1>\n<p>To help manage and setup my back end resources, I used the <a href=\"https://serverless.com/\">Serverless framework</a> as my <a href=\"https://en.wikipedia.org/wiki/Infrastructure_as_code\">IaC</a> solution. Using an infrastructure as code framework, allows me to rebuild my back end easily, in case I screw anything up. </p>\n<p>For code and build instructions see:\n<a href=\"https://github.com/jooshkins/scooter-backend\">https://github.com/jooshkins/scooter-backend</a></p>","frontmatter":{"title":"üñ•Ô∏è Back End","date":"April 28, 2019"}}},"pageContext":{"slug":"/backend/","previous":{"fields":{"slug":"/project-goals/"},"frontmatter":{"title":"Idea / Project Goals"}},"next":{"fields":{"slug":"/frontend/"},"frontmatter":{"title":"üñºÔ∏è Front End"}}}}