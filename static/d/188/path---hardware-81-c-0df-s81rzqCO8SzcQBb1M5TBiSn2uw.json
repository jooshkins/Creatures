{"data":{"site":{"siteMetadata":{"title":"Creatures üëπüõ¥","author":"Joshua Sheridan"}},"markdownRemark":{"id":"c07b3054-b831-5724-91c3-d8cdcc40ffc9","excerpt":" In this post I will cover the history of developing the hardware solution for my scooter share app.  üò° Challenges Two key challenges‚Ä¶","html":"<p> In this post I will cover the history of developing the hardware solution for my scooter share app. </p>\n<h1>üò° Challenges</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">There are two main challenges that I faced in developing my dock-less scooter hardware, tracking and security. Depending on how completely you want to solve these challenges, will determine the approach you take towards implementing a solution.</code></pre></div>\n<p><strong>Two key challenges:</strong>\nTracking:\n- Know where the scooter is at all times, as best I can.\n- Tracking is needed, because scooters will need to be picked up for charging, and repairs.\nSecurity:\n- To prevent unauthorized access to the scooter.\n- Security is needed to deter thieves and general meanies from harming our beloved scooters.</p>\n<h1>ü§î Solutions</h1>\n<h2>üó∫Ô∏è Tracking:</h2>\n<p>I can solve the challenge of tracking though the use of a combination of GPS and a cellular data connection. Below is three methods for tracking, in practice I will be using a combination of two or more of these methods.</p>\n<p>üìª <strong>Embedded GPS on the scooter</strong>\nThis method uses a device embedded onto the scooter. The device requires at least a GPS module, GPS antenna, and a cellular data connection to upload the scooter‚Äôs coordinates to our server.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**Pros:**\n- Tracking is physically bound to the scooter.\n- Can track even if the scooter is moved when locked.\n- Most accurate form of tracking.\n**Cons:**\n- Most expensive.\n- Largest hardware requirement.\n- Requires GPS signal to work.</code></pre></div>\n<p>üì± <strong>User‚Äôs phone GPS</strong>\nVia the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\">HTML Geolocation API</a> I can request the location of our users. The idea is that I would start tracking once a scooter is checked out and stop once the ride ends. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**Pros:**\n- Free.\n- No requirements for additional scooter hardware.\n- The Geolocation API also uses WiFi and IP based locating if GPS signal is not available.\n**Cons:**\n- Relies on user‚Äôs cellular connection, which may be unreliable.\n- Use of a VPN may prevent accurate tracking.\n- Assumes that the phone which unlocked the scooter is within close proximity to the scooter during the entire ride‚Ä¶ which is not necessarily true.</code></pre></div>\n<p>üì∂ <strong>Triangulation of Cell Towers:</strong>\nA device which has a cellular connection can preform a rudimentary form of <a href=\"https://docs.particle.io/tutorials/integrations/google-maps/\">tracking by triangulating it‚Äôs location in relation to nearby cell towers</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**Pros:**\n- Mild hardware requirements.\n- Works in areas that do not have a GPS signal e.g. indoors.\n**Cons:**\n- Tracking is not very accurate.\n- Still requires a device with a cellular connection.</code></pre></div>\n<h2>üëÆ‚Äç‚ôÄÔ∏è Security:</h2>\n<p>There are two methods for hopefully keeping the scooters a bit safer.</p>\n<p>üö® <strong>Alarm</strong>\nI want my device to be able to ask and answer this question, <em>Is someone riding me or moving me without permission?</em>  The first requirement to answering this question is that my scooter needs to be able to detect motion.</p>\n<p><strong>Some methods to detect motion:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Embedded accelerometer - detect acceleration.\n- Changes in location via GPS.\n- Magnetometer - digital compass, detecting changes in direction.\n- Use a simple shake switch to detect vibrations.\n- Detect if our scooter‚Äôs wheels are moving.</code></pre></div>\n<p>Once the device has detected motion, it will check its lock status, if unlocked do nothing, otherwise sound an alarm.</p>\n<p>üîí <strong>Locking</strong>\nI will lock my scooter by disabling the throttle, in affect acting as a remote kill switch.\nFor this to work, my scooter will have an embedded micro controller which will connect to the throttle of the scooter, and control access to it. </p>\n<p><strong>There are several methods that I can provide for a user to unlock the scooter:</strong></p>\n<ul>\n<li>\n<p>Unlock via web app.</p>\n<ul>\n<li>Easiest for a user to use.</li>\n<li>Requires active cell connection for our scooter‚Äôs hardware.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>Keypad Unlocking - Turning throttle on or off via keypad on scooter, user would have to enter an unlock code generated by our web app.</p>\n<ul>\n<li>Does not require Cell Connection on scooter.</li>\n<li>Would require code to keep security keys in sync on the server and scooter hardware.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Bluetooth_Low_Energy\">BLE</a> Unlocking - Turning throttle on or off via bluetooth, in effect I would use the user‚Äôs bluetooth connection on their phone to control the throttle on the scooter.</p>\n<ul>\n<li>Requires a scooter with a cracked BLE protocol.</li>\n<li>\n<p>In order to use a customer‚Äôs Bluetooth connection, I would need to develop native apps, IOS or Andriod. There is a <a href=\"https://developer.mozilla.corg/en-US/docs/Web/API/Web_Bluetooth_API\">web bluetooth api</a>, however it is not fully supported yet.</p>\n<h1>üôÇ Implementation</h1>\n</li>\n</ul>\n</li>\n</ul>\n<p>Now that I have my solutions researched, how can I implement the solutions in practice?\nIn the end I came up with two separate hardware solutions,</p>\n<ul>\n<li>A quick and dirty option, that utilizes a cell phone, and minimal effort.</li>\n<li>\n<p>And a more robust option in which I put together a custom embedded device.</p>\n<h2>The minimal effort option.</h2>\n</li>\n</ul>\n<p>The beauty of this option is that you probably already own all the required hardware to test it out. All you will need is a cell phone, preferably one you would not mind losing. Modern cell phones are incredible devices, and they contain a multitude of sensors and processing capacity. Specifically phones provide a lot of the hardware capabilities that I am interested in for my scooter.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Phone Hardware</strong></th>\n<th><strong>Specific Requirement</strong></th>\n<th><strong>Project Feature</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPS radio</td>\n<td>Location tracking</td>\n<td>Tracking - Embedded</td>\n</tr>\n<tr>\n<td>Cellular connection</td>\n<td>Data Transfer</td>\n<td>Tracking &#x26; Security</td>\n</tr>\n<tr>\n<td>Battery</td>\n<td>Remote Operation</td>\n<td>Tracking &#x26; Security</td>\n</tr>\n<tr>\n<td>Processor</td>\n<td>Handling App Logic</td>\n<td>Tracking &#x26; Security</td>\n</tr>\n<tr>\n<td>Speakers</td>\n<td>Alarm</td>\n<td>Security - Alarm</td>\n</tr>\n<tr>\n<td>Accelerometers</td>\n<td>Detecting motion</td>\n<td>Security - Alarm</td>\n</tr>\n</tbody>\n</table>\n<p><strong>One requirement you will not see in the table above is locking.</strong></p>\n<p><strong>I can approach the locking issue in one of several ways:</strong></p>\n<ul>\n<li>Leave it out, who cares, the scooter will still have the alarm go off if someone does not unlock it.</li>\n<li>Add another device controlled by the phone (Arudino, raspberry pi, etc)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Bluetooth_Low_Energy\">BLE</a> locking, with a lot of the electric scooters on the market you can connect to them via bluetooth and control the throttle via an app.</li>\n</ul>\n<p>After some research, I ultimately chose that I wanted to go down the route of adding another device in addition to the cell phone.  figure out the locking capability. I will be using the ever popular <a href=\"https://en.wikipedia.org/wiki/ESP8266\">ESP8266</a>. I chose the ESP8266 because it is, cheap, popular, and includes WiFi connectivity.</p>\n<p>‚öôÔ∏è <strong>Hardware Requirements</strong></p>\n<ul>\n<li>\n<p>Old, used Android phone, or cheap new one.</p>\n<ul>\n<li>For me, I am using an old busted moto x pure, the screen mostly works, and the battery life is crap, but it is good enough for testing.\n<img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553629644079_20190326_154505.jpg\"></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://www.amazon.com/Pinfox-Waterproof-Electronic-Junction-Enclosure/dp/B06XSMK61Q/ref=sr_1_52?s=lamps-light&#x26;ie=UTF8&#x26;qid=1538679539&#x26;sr=1-52&#x26;keywords=project+box\">A water proof plastic project box</a> and mounting hardware.</p>\n<ul>\n<li>Mounting hardware: nuts, bolts, washers, and pipe straps. I needed to drill several holes to mount the pipe straps to the project box‚Äôs cover.\n<img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553630301546_20181006_160149.jpg\">\n<img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553630350230_20181006_161905.jpg\">\n<img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553629903108_20181006_161953.jpg\"></li>\n</ul>\n</li>\n<li>\n<p>Cheap SIM card, <a href=\"https://www.freedompop.com/\">FreedomPop</a>, <a href=\"https://ting.com\">Ting</a>, <a href=\"https://hologram.io/\">Hologram</a> are good options.</p>\n</li>\n<li>\n<p><a href=\"https://www.amazon.com/s?k=esp8266&#x26;ref=nb_sb_noss_1\">esp8266</a> micro controller - Optional, needed for locking capability.</p>\n</li>\n<li>\n<p><a href=\"https://www.sparkfun.com/products/15105\">Optoisolator</a> - to isolate the scooter which runs on 5v from the the esp8266 which runs on 3.3v.</p>\n</li>\n</ul>\n<p>üíæ <strong>Software Requirements:</strong></p>\n<ul>\n<li><a href=\"https://llamalab.com/automate/\">Automate app</a> - for running a simple ‚Äúapp‚Äù on our phone.</li>\n<li><a href=\"https://www.arduino.cc/en/main/software\">Arduino IDE</a>- for programming our esp8266.</li>\n</ul>\n<p><strong>Setup Cell Phone:</strong>\nFor my SIM card, I am using a spare <a href=\"https://www.freedompop.com/\">Freedom Pop</a> SIM.  Freedom pop offers limited data plans, some which are free if you do not go over your data cap. Since my scooter‚Äôs cell phone will use very little data, I shouldn‚Äôt have a problem staying within FreedomPop‚Äôs free tier.</p>\n<p>The first step I took was to reset the phone, so that it does not contain any personal data. I also created a throwaway email account for my scooter, because I needed an email address to be able to download apps from the play store. For tracking, I used google‚Äôs built in find my phone feature.</p>\n<p>The next step is to install the <a href=\"https://llamalab.com/automate/\">Automate app</a>, this app allows to you to create ‚Äúprograms‚Äù to automate different features of your phone. Using Automate‚Äôs visual flowchart interface, I made an app that will handle the logic for my scooter, you can find a copy of the app here:   insert link,  add to repo</p>\n<p><strong>The app‚Äôs logic works as such:</strong></p>\n<ol>\n<li>\n<p>When it detects movement via the phone‚Äôs accelerometer:</p>\n<ol>\n<li>The phone sends a http request to my scooterCheckSelf endpoint, to check to see if the scooter has been checked out.</li>\n<li>\n<p>My endpoint responds with true or false, letting our phone know if the scooter has been checked out.</p>\n<ul>\n<li>\n<p>If the scooter has not been checked out,</p>\n<ul>\n<li>Turn on alarm and send http request to esp8266 to lock the throttle.</li>\n</ul>\n</li>\n<li>\n<p>If the scooter is checked out, </p>\n<ul>\n<li>Send http request to esp8266 to unlock the throttle.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p><strong>Program esp8266</strong>\nThe phone and esp8266 will communicate via an Ad-hoc WiFi network. The esp8266 will act as an access point which the phone will connect to. Also the esp8266 will serve up a simple web server with which the phone will be able to send requests to.</p>\n<p><strong>To setup the esp8266:</strong></p>\n<ol>\n<li>Download and install <a href=\"https://www.arduino.cc/en/Main/Software\">Arduino IDE</a></li>\n<li>Flash custom scooter controller firmware onto esp8266 - insert link\nadd to repo</li>\n</ol>\n<p><strong>The scooter controller firmware‚Äôs logic works as such:</strong></p>\n<ol>\n<li>Creates an ad-hoc wifi network, that the cell phone will connect to.</li>\n<li>Prints it‚Äôs ip address to it‚Äôs serial port. </li>\n<li>\n<p>Creates a simple web server with two endpoints.</p>\n<ol>\n<li><a href=\"http://%E2%80%9Desp8266%E2%80%99s\">http://‚Äùesp8266‚Äôs</a> IP address‚Äù/on  ‚Äî send high power to pin SD3 (known as pin 10 in code)</li>\n<li><a href=\"http://%E2%80%9Desp8266%E2%80%99s\">http://‚Äùesp8266‚Äôs</a> IP address‚Äù/off  ‚Äî send low power to pin SD3</li>\n</ol>\n</li>\n</ol>\n<p><strong>Wiring Diagram</strong>\nThe actual model of esp8266 I used differs from the one in the diagram, so pin layout may vary.\nThe 4n35 optoisolator needs a resistor 470 ohm connected pin 1, the other side of the optoisolator interrupts the positive wire from the scooter‚Äôs head unit to the scooter‚Äôs throttle. </p>\n<p><img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553630802777_ESP8266Sketch_bb.png\"></p>\n<p><strong>Fritzing Wiring Diagram File:</strong></p>\n<p><a href=\"https://www.dropbox.com/s/1zzq6pjopehvrqt/ESP8266Sketch%20%281%29.fzz?dl=0\">https://www.dropbox.com/s/1zzq6pjopehvrqt/ESP8266Sketch%20%281%29.fzz?dl=0</a></p>\n<p><strong>Bread Board</strong>\nYou can consider the LED as a stand in for the throttle in this setup. Since the LED is on, the scooter would be unlocked.</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553808089066_20190328_165140.jpg\"></p>\n<p><strong>Mount box to scooter</strong>\nThe scooter in the photo is a cheap kick scooter for testing purposes. For an electric scooter, we would need to route wires from the scooter‚Äôs head unit and throttle. </p>\n<p><img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553630230681_20181006_164324.jpg\" alt=\"The project box is comically large because it is needed to hold my spare large phone. A smaller phone would be a better choice.\">\n<img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553630223747_20181006_164401.jpg\"></p>\n<p>The minimal effort option does work, I was able to get it to detect motion, control the alarm, lock status, and communicate with my API. Not a bad result for a mostly broken phone and a $5 micro controller. However I didn‚Äôt bother thoroughly testing this solution. I assume that I would have issues with battery life, managing sleep states and software stability. This option was a fun experiment in seeing how far I could go, without out putting much effort into the setup</p>\n<h2>The Embedded Option</h2>\n<p>For the embedded option, I made a video explaining how I put it together. The material below is written as supplementary material for the video, rather than an overview.\nInsert Link to Video</p>\n<p>Using off the shelf components, I will be putting together a custom device purpose built to work with my application. The embedded option is attempt to create a solution that would be somewhat plausible to deploy to actual customers. However there are certainly a lot of improvements that could be made. </p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Over the air updates - via Particle cloud service.</li>\n<li>More predictable results,  no unnecessary software running on our device. </li>\n<li>More customizable actions.</li>\n<li>Battery should last a lot longer.</li>\n<li>Better Tracking</li>\n<li>More compact than minimal option.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>More complicated assembly.</li>\n<li>\n<p>Particle has a monthly cost.</p>\n<h2>Parts List:</h2>\n</li>\n<li><a href=\"https://www.sparkfun.com/products/13740\">GPS Receiver - GP-20U7</a></li>\n<li><a href=\"https://www.adafruit.com/product/1536\">Buzzer</a></li>\n<li><a href=\"https://store.particle.io/collections/cellular\">Particle Electron</a></li>\n<li><a href=\"https://www.amazon.com/ALITOVE-Female-Connector-WS2812B-SK6812-RGBW/dp/B071H5XCN5/ref=sr_1_39?crid=3FVLXSARLY7VV&#x26;keywords=jst+connector&#x26;qid=1548081502&#x26;sprefix=jst+co%2Caps%2C178&#x26;sr=8-39\">JST-SM Connectors</a></li>\n<li><a href=\"https://www.adafruit.com/product/3931\">Waterproof Enclosure</a> </li>\n<li><a href=\"https://www.sparkfun.com/products/15105\">Optoisolator</a></li>\n<li>Typical electronics supplies: resistors, wire, solder, connectors</li>\n</ul>\n<p><a href=\"https://www.adafruit.com/product/2809\">https://www.adafruit.com/product/2809</a></p>\n<p><a href=\"https://www.adafruit.com/product/1609\">https://www.adafruit.com/product/1609</a></p>\n<p><a href=\"https://www.adafruit.com/product/598\">https://www.adafruit.com/product/598</a></p>\n<h2>Software List</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Custom Particle Firmware ‚Äî Insert Link</code></pre></div>\n<p><strong>Particle Firmware Flow</strong>\nMain Loop:</p>\n<ol>\n<li>Check if battery status is below 10%, if so perma-lock scooter </li>\n<li>\n<p>Check if scooter has been has been unlocked longer than the ride time limit.</p>\n<ol>\n<li>If so, lock scooter.</li>\n</ol>\n</li>\n<li>Gather GPS data</li>\n<li>\n<p>Check for movement, </p>\n<ol>\n<li>If movement occurred, and scooter is locked, sound alarm.</li>\n</ol>\n</li>\n<li>Run google locator function, cell and wifi tracking.</li>\n</ol>\n<p><strong>Wiring Diagram</strong>\nIn the first diagram, the particle electron is hidden to show the wiring.</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1553811750935_ParticleSketchAccl-3_bb.png\"></p>\n<p><strong>Fritzing Wiring Diagram File:</strong></p>\n<p><a href=\"https://www.dropbox.com/s/fe2phrqxk2ju1tk/ParticleSketchAccl-3.fzz?dl=0\">https://www.dropbox.com/s/fe2phrqxk2ju1tk/ParticleSketchAccl-3.fzz?dl=0</a></p>\n<h2>Photos of completed device:</h2>\n<p><img src=\"https://paper-attachments.dropbox.com/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1556823500338_protoboard1.jpg\"></p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1556823505820_protoboard2.jpg\"></p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_358F44150DD3E0D6E6965886F0FC9C0AC656EBEB49FC6D58F11DF412AA96D0A7_1556824732342_protoboard3.jpg\"></p>\n<p>Insert photo in box</p>","frontmatter":{"title":"üõ†Ô∏è Hardware","date":"May 03, 2019"}}},"pageContext":{"slug":"/hardware/","previous":{"fields":{"slug":"/frontend/"},"frontmatter":{"title":"üñºÔ∏è Front End"}},"next":null}}